(define (choose l)
  (list-ref l (random-integer (length l)))
)

(define (trial num-doors switch?)
  (let* ((doors (make-list num-doors)) 
         (win (choose doors))
         (choice (choose doors))
         (leave-closed (if (= choice win) (choose (filter (lambda (x) (and (not (= x win)) (not (= x choice)))) doors)) win)))
    (set! doors (filter (lambda (x) (or (= x choice) (= x leave-closed))) doors))
    (if switch?
      (set! choice leave-closed)
    )
    (= choice win)
  )
)

(define (do-trials n num-doors switch?)
  (letrec ((f (lambda (n i w switch?)
    (if (= i n)
      w
      (f n (+ i 1) (if (trial num-doors switch?) (+ w 1) w) switch?)
    ))))
    (f n 0 0 switch?)
  )
)

(define (monty n num-doors)
  (let ((switch-wins (do-trials n num-doors #t)) 
        (stick-wins (do-trials n num-doors #f)))  
    (display "Switch Wins: ")
    (display (/ switch-wins (* n 0.01)))
    (display "%\n")
    (display "Stick Wins: ")
    (display (/ stick-wins (* n 0.01)))
    (display "%\n")
  )
)
